/////////////////////////////////////
// DO NOT EDIT THIS FILE DIRECTLY,
// THIS FILE WAS AUTO GENERATED.
/////////////////////////////////////

import { ObjectType, Field, HideField } from "@nestjs/graphql";

import { UserProvider as PrismaUserProvider, Provider } from "@prisma/client";
import { BaseUser } from "./User.model";

export { PrismaUserProvider };

export type UserProviderConstructor = {
  provider: keyof typeof Provider;
  userId: string;
  user?: BaseUser | null;
};

@ObjectType({ isAbstract: true })
export class BaseUserProvider implements PrismaUserProvider {
  @HideField()
  provider: keyof typeof Provider;

  @Field(() => String!, { nullable: false })
  readonly userId: string;

  @Field(() => BaseUser, { nullable: true })
  user: null | BaseUser;

  constructor(model: UserProviderConstructor) {
    this.provider = model.provider;
    this.userId = model.userId;
    this.user = model.user ?? null;
  }

  static fromPrisma(hash: PrismaUserProvider): BaseUserProvider {
    return new BaseUserProvider(hash);
  }

  toPrisma(): PrismaUserProvider {
    const { user, ...entity } = this;
    return entity;
  }
}
