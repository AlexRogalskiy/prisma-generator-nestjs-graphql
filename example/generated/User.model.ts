/////////////////////////////////////
// DO NOT EDIT THIS FILE DIRECTLY,
// THIS FILE WAS AUTO GENERATED.
/////////////////////////////////////

import { v4 } from "uuid";
import { IsEmail, IsDate, MaxDate, IsIP } from "class-validator";

import { ObjectType, Field, ID, HideField } from "@nestjs/graphql";

import { User as PrismaUser } from "@prisma/client";

import { BaseEmailConfirmationToken } from "./EmailConfirmationToken.model";
import { BaseForgotPasswordToken } from "./ForgotPasswordToken.model";
import { BaseUserProvider } from "./UserProvider.model";
import { BaseUserPermission } from "./UserPermission.model";
import { BaseUserRole } from "./UserRole.model";

export type UserConstructor = {
  id?: string | null;
  email: string;
  passwordHash?: string | null;
  tokenVersion?: number | null;
  isEmailConfirmed?: boolean | null;
  firstName?: string | null;
  lastName?: string | null;
  lastHeartbeatAt?: Date | null;
  lastLoginAt?: Date | null;
  lastLoginIP?: string | null;
  createdIP: string;
  createdAt?: Date | null;
  updatedAt?: Date | null;
  emailConfirmationToken?: BaseEmailConfirmationToken | null;
  forgotPasswordToken?: BaseForgotPasswordToken | null;
  providers?: BaseUserProvider[] | null;
  permissions?: BaseUserPermission[] | null;
  roles?: BaseUserRole[] | null;
};

@ObjectType({ isAbstract: true })
export class BaseUser implements PrismaUser {
  @Field(() => ID, { nullable: false })
  readonly id: string;

  @IsEmail()
  @Field(() => String!, { nullable: false })
  email: string;

  @HideField()
  passwordHash: null | string;

  @HideField()
  tokenVersion: number;

  @Field(() => Boolean!, { nullable: false })
  isEmailConfirmed: boolean;

  @Field(() => String, { nullable: true })
  firstName: null | string;

  @Field(() => String, { nullable: true })
  lastName: null | string;

  @IsDate()
  @MaxDate(new Date())
  @Field(() => Date, { nullable: true })
  lastHeartbeatAt: null | Date;

  @IsDate()
  @MaxDate(new Date())
  @Field(() => Date, { nullable: true })
  lastLoginAt: null | Date;

  @IsIP()
  @Field(() => String, { nullable: true })
  lastLoginIP: null | string;

  @IsIP()
  @Field(() => String!, { nullable: false })
  createdIP: string;

  @IsDate()
  @MaxDate(new Date())
  @Field(() => Date!, { nullable: false })
  createdAt: Date;

  @Field(() => Date, { nullable: true })
  updatedAt: null | Date;

  @Field(() => BaseEmailConfirmationToken, { nullable: true })
  emailConfirmationToken: null | BaseEmailConfirmationToken;

  @Field(() => BaseForgotPasswordToken, { nullable: true })
  forgotPasswordToken: null | BaseForgotPasswordToken;

  @HideField()
  providers: null | BaseUserProvider[];

  @HideField()
  permissions: null | BaseUserPermission[];

  @HideField()
  roles: null | BaseUserRole[];

  constructor(model: UserConstructor) {
    this.id = model.id ?? v4();
    this.email = model.email;
    this.passwordHash = model.passwordHash ?? null;
    this.tokenVersion = model.tokenVersion ?? 0;
    this.isEmailConfirmed = model.isEmailConfirmed ?? false;
    this.firstName = model.firstName ?? null;
    this.lastName = model.lastName ?? null;
    this.lastHeartbeatAt = model.lastHeartbeatAt ?? null;
    this.lastLoginAt = model.lastLoginAt ?? null;
    this.lastLoginIP = model.lastLoginIP ?? null;
    this.createdIP = model.createdIP;
    this.createdAt = model.createdAt ?? new Date();
    this.updatedAt = model.updatedAt ?? null;
    this.emailConfirmationToken = model.emailConfirmationToken ?? null;
    this.forgotPasswordToken = model.forgotPasswordToken ?? null;
    this.providers = model.providers ?? null;
    this.permissions = model.permissions ?? null;
    this.roles = model.roles ?? null;
  }

  static fromHash(hash: PrismaUser): BaseUser {
    return new BaseUser(hash);
  }

  toHash(): PrismaUser {
    const {
      emailConfirmationToken,
      forgotPasswordToken,
      providers,
      permissions,
      roles,
      ...entity
    } = this;
    return entity;
  }
}
